try:
    from subprocess import check_output
    from colors import colors as c
    from colorama import Fore
    from banner import banner
    from time import sleep
    from os import system
    from sys import exit
    import re
except Exception as Err:
    exit(c.RED + '[' + c.YELLOW + c.ANIMATION + '!' + c.RESET + c.RED + ']' + f' {Err}.' + c.RESET)


def vulnerability_scanner(url):
    try:
        set_timing = int(input(c.YELLOW + c.ANIMATION + '[+]' + c.RESET + c.CYAN +
                               ' Set timing template between 0-5 (higher is faster): '.title()))
        if 5 < set_timing < 0:
            system('clear')
            exit(c.RED + '[' + c.YELLOW + c.ANIMATION + '!' + c.RESET + c.RED + ']' + 'invalid time'.title())
        regular_curl = re.findall(r'(?:https://)(.*)', url)[0]
        get_ip = check_output([f'nslookup {regular_curl.strip("/")}'], shell=True)
        regex = re.findall(r'(?:Address:)(.*)', get_ip.decode())
        system('clear')
        banner()
        print(
            c.GREEN + '[*] vulnerability scanner for this ip' + c.YELLOW + f'{regex[1]}' + c.GREEN + ' default choose:\n\n'.title() +
            c.GREEN + '[+] Enable OS detection, version detection, script scanning, and traceroute.\n'.title() +
            c.GREEN + '[+] Fast mode - Scan fewer ports than the default scan.\n'.title() +
            c.GREEN + f'[+] Set timing template {set_timing}.\n'.title() +
            c.GREEN + '[+] Increase verbosity level.\n\n\n' + Fore.RESET.title())
        system(f'nmap -A -F -T{set_timing} {regex[1]} -v')

    except KeyboardInterrupt:
        exit(c.YELLOW + '\nBye')
    except ValueError:
        exit(c.RED + '[' + c.YELLOW + c.ANIMATION + '!' + c.RESET + c.RED + ']' + 'invalid input'.title())
