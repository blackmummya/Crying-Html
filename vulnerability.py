import re
import sys
import subprocess
from os import system
from sys import exit
from time import sleep

from colors import colors as c
from colorama import Fore
from banner import banner
from json import dump, load

def clear_screen():
    system('clear')

def get_domain(url: str) -> str:
    match = re.search(r'https?://([^/]+)', url)
    if match:
        return match.group(1)
    else:
        return url

def lookup_ip(domain: str) -> str:
    try:
        output = subprocess.check_output(['nslookup', domain]).decode()
        matches = re.findall(r'Address:\s*([\d.]+)', output)
        if matches:
            return matches[1] if len(matches) > 1 else matches[0]
        else:
            raise ValueError(f"No IP address found for domain: {domain}")
    except Exception as e:
        print(c.RED + f"Error during nslookup for {domain}: {e}" + c.RESET)
        sys.exit(1)


def nmap_scan(url: str) -> None:
    clear_screen()
    ascii_banner = """
███╗░░██╗███╗░░░███╗░█████╗░██████╗░
████╗░██║████╗░████║██╔══██╗██╔══██╗
██╔██╗██║██╔████╔██║███████║██████╔╝
██║╚████║██║╚██╔╝██║██╔══██║██╔═══╝░
██║░╚███║██║░╚═╝░██║██║░░██║██║░░░░░
╚═╝░░╚══╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░░░░
"""
    print(ascii_banner)
    try:
        set_timing = int(input(c.YELLOW + c.ANIMATION + '\n[+]' + c.RESET + c.CYAN +
                                 ' Set timing template between 0-5 (higher is faster): '.title()))
    except ValueError:
        exit(c.RED + f'[{c.YELLOW}{c.ANIMATION}{c.RESET}{c.RED}] Invalid input. Timing must be an integer.' + c.RESET)
    
    if set_timing < 0 or set_timing > 5:
        clear_screen()
        exit(c.RED + f'[{c.YELLOW}{c.ANIMATION}{c.RESET}{c.RED}] Invalid timing value. Must be between 0 and 5.' + c.RESET)
    
    domain = get_domain(url)
    ip_address = lookup_ip(domain)
    
    clear_screen()
    print(ascii_banner)
    info_msg = (
        f"\n[{c.WHITE}+{c.GREEN}] {c.CYAN}Vulnerability scanner for this IP: {c.YELLOW}{ip_address}{c.GREEN} default choose:\n\n"
        f"[{c.WHITE}+{c.GREEN}] {c.CYAN}Enable OS detection, version detection, script scanning, and traceroute.\n"
        f"[{c.WHITE}+{c.GREEN}] {c.CYAN}Fast mode - Scan fewer ports than the default scan.\n"
        f"[{c.WHITE}+{c.GREEN}] {c.CYAN}Set timing template {set_timing}.\n"
        f"[{c.WHITE}+{c.GREEN}] {c.CYAN}Increase verbosity level.\n\n\n{Fore.RESET}{c.RESET}"
    )
    print(info_msg)
    command = f"nmap -A -F -T{set_timing} {ip_address} -v"
    system(command)

def shodan_scan(url: str) -> None:
    clear_screen()
    ascii_banner = """
░██████╗██╗░░██╗░█████╗░██████╗░░█████╗░███╗░░██╗
██╔════╝██║░░██║██╔══██╗██╔══██╗██╔══██╗████╗░██║
╚█████╗░███████║██║░░██║██║░░██║███████║██╔██╗██║
░╚═══██╗██╔══██║██║░░██║██║░░██║██╔══██║██║╚████║
██████╔╝██║░░██║╚█████╔╝██████╔╝██║░░██║██║░╚███║
╚═════╝░╚═╝░░╚═╝░╚════╝░╚═════╝░╚═╝░░╚═╝╚═╝░░╚══╝
"""
    print(ascii_banner)
    domain = get_domain(url)
    ip_address = lookup_ip(domain)
    
    try:
        command = f"shodan host {ip_address}"
        res = subprocess.check_output(command, shell=True).decode()
    except Exception as e:
        print(c.RED + f"Error running shodan: {e}" + c.RESET)
        sys.exit(1)
    
    try:
        host_name = re.search(r'Hostnames:\s*(.*)', res)
        host_name = host_name.group(1).strip() if host_name else "N/A"
        
        n_ports = re.search(r'Number of open ports:\s*(.*)', res)
        n_ports = n_ports.group(1).strip() if n_ports else "N/A"
        
        ports = re.search(r'Ports:\s*(.*)', res)
        ports = ports.group(1).strip() if ports else "N/A"
    except Exception as e:
        print(c.RED + f"Error parsing shodan output: {e}" + c.RESET)
        sys.exit(1)
    
    print(
        f"\n[{c.WHITE}+{c.GREEN}] {c.CYAN}HostName: {c.YELLOW}{host_name}\n"
        f"[{c.WHITE}+{c.GREEN}] {c.CYAN}Number of open ports: {c.YELLOW}{n_ports}\n"
        f"[{c.WHITE}+{c.GREEN}] {c.CYAN}Ports: {c.YELLOW}{ports}"
    )
    
    vulnerability = re.search(r'Vulnerabilities:\s*(.*)', res)
    if vulnerability:
        print(f"\n[{c.WHITE}+{c.GREEN}] {c.CYAN}Vulnerability: {c.RED}{vulnerability.group(1).strip()}")
